#      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó
#      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë
#      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë
#      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë‚ñÑ‚ñÑ ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
#      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë

# meta developer: @Yaukais,@Shadow_red1

# token = 7630170603:AAEMKaJHWrugihnMUGVDJTcLoKboknqP-6s
# cd /storage/emulated/0/zombie_game
# python zombie_bot.py

import telebot
import json
import os
import random
import threading
import time
from telebot import types
from datetime import datetime, timedelta

API_TOKEN = '7630170603:AAEMKaJHWrugihnMUGVDJTcLoKboknqP-6s'
bot = telebot.TeleBot(API_TOKEN)

PROFILES_FILE = 'user_profiles.json'
ADMIN_ID = '6365361106'  # ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
if os.path.exists(PROFILES_FILE):
    try:
        with open(PROFILES_FILE, 'r') as file:
            user_profiles = json.load(file)
    except json.JSONDecodeError as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}')
        user_profiles = {}
else:
    user_profiles = {}

GENERATOR_LEVELS = {
    "–≤–æ–¥—è–Ω–æ–π": {"experience": 0, "energy": 1, "nails": 50},
    "—É–≥–æ–ª—å–Ω—ã–π": {"experience": 500, "energy": 4, "nails": 200},
    "–¥—Ä–µ–≤–µ—Å–Ω—ã–π": {"experience": 2000, "energy": 8, "nails": 400},
    "–Ω–µ—Ñ—Ç—è–Ω–æ–π": {"experience": 10000, "energy": 26, "nails": 1200},
    "–≤–µ—Ç—Ä–µ–Ω–æ–π": {"experience": 25000, "energy": 58, "nails": 7500},
    "—Å–æ–ª–Ω–µ—á–Ω—ã–π": {"experience": 60000, "energy": 142, "nails": 40000},
    "—è–¥–µ—Ä–Ω–æ–π": {"experience": 100000, "energy": 800, "nails": 120000}
}

def initialize_profile(user_id, first_name):
    return {
        "profile_created": True,
        "status": "–ò–≥—Ä–æ–∫",
        "level": 1,
        "experience": 0,
        "w_coin": 0,
        "balance": 0,
        "base_level": 1,
        "registration_date": datetime.now().strftime("%d.%m.%Y"),
        "nails": {
            "rusty": 0,
            "broken": 0,
            "normal": 0,
            "golden": 0,
            "platinum": 0
        },
        "last_bonus_claim": datetime.now().strftime("%Y-%m-%dT%H:%M:%S"),
        "weapons": 0,
        "medkits": 0,
        "exploration_history": [],
        "promo_codes_used": [],
        "avatar": None,
        "water": 20,
        "energy": 0,
        "generator_experience": 0,
        "generator_type": "–≤–æ–¥—è–Ω–æ–π",
        "exploration_success": False,
        "first_name": first_name,
        "rating": 0  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    }

@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É", callback_data='create_profile')
    markup.add(button)

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BFG|Zombie attack! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–ø–∏—à–∏—Ç–µ - <code>–ë–∞–∑–∞</code>.",
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'create_profile')
def handle_create_profile_callback(call):
    user_id = str(call.from_user.id)
    first_name = call.from_user.first_name
    if user_id not in user_profiles:
        user_profiles[user_id] = initialize_profile(user_id, first_name)
        save_profiles()
        bot.send_message(call.message.chat.id, "–í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! \n–ù–∞–ø–∏—à–∏—Ç–µ - <code>–ë–∞–∑–∞</code> , –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.", parse_mode='HTML')
    else:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ - <code>–ë–∞–∑–∞</code> , –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.", parse_mode='HTML')
            
@bot.message_handler(func=lambda message: message.text.lower() in ["–±–∞–∑–∞", "–±"])
def view_profile(message):
    user_id = str(message.from_user.id)
    if user_id in user_profiles and user_profiles[user_id]["profile_created"]:
        profile_info = user_profiles[user_id]
        water = profile_info.get('water', 0)
        energy = profile_info.get('energy', 0)
        nails = profile_info.get('nails', {}).get('normal', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'rating' –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if 'rating' not in profile_info:
            profile_info['rating'] = 0

        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data='my_generator'),
            types.InlineKeyboardButton("–ò–Ω—Ñ–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data='generator_info'),
            types.InlineKeyboardButton("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É", callback_data='explore_zone'),
            types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help'),
            types.InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data='inventory'),
            types.InlineKeyboardButton("–°–∫–ª–∞–¥", callback_data='storage'),
            types.InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥", callback_data='promo_code'),
            types.InlineKeyboardButton("–û–±–º–µ–Ω –í–ò–ü", callback_data='exchange_w_coin'),
            types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", callback_data='exploration_history'),
            types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ URL", callback_data='upload_avatar_url'),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É", callback_data='remove_avatar'),
            types.InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å –±–∞–∑—É", callback_data='upgrade_base'),
            types.InlineKeyboardButton("–†–µ–π–¥", callback_data='raid_instructions')
        )

        if profile_info.get("avatar"):
            bot.send_photo(message.chat.id, profile_info["avatar"], caption="üåê –í–∞—à –∞–≤–∞—Ç–∞—Ä:")
        else:
            bot.send_message(message.chat.id, "üåê –í–∞—à –∞–≤–∞—Ç–∞—Ä: –ù–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏.")

        profile_message = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî : {user_id}\n"
            f"üè¢ –°—Ç–∞—Ç—É—Å: {profile_info['status']}\n"
            f"ü™ô ≈µ-coin: {profile_info.get('w_coin', 0)}\n"
            f"üî© –ë–∞–ª–∞–Ω—Å: {profile_info.get('balance', 0)} –≥–≤.\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å –±–∞–∑—ã: {profile_info.get('base_level', 1)}\n"
            f"‚≠êÔ∏è –û–ø—ã—Ç: {profile_info['experience']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile_info['registration_date']}\n"
            f"üíß –í–æ–¥–∞: {water}/20 –ª.\n"
            f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: {energy} —à—Ç.\n"
            f"üî© –ì–≤–æ–∑–¥–µ–π: {nails} —à—Ç.\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {profile_info['rating']}.\n"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        )

        bot.send_message(message.chat.id, profile_message, parse_mode='HTML', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'my_generator')
def my_generator(call):
    user_id = str(call.from_user.id)
    profile_info = user_profiles[user_id]

    generator_message = (
        f"{profile_info['first_name']}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ:\n"
        f"‚≠êÔ∏è –û–ø—ã—Ç: {profile_info['generator_experience']}\n"
        f"üíß –í–æ–¥–∞: {profile_info['water']}/20 –ª.\n"
        f"üè≠ –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {profile_info['generator_type']}\n"
        f"\nüì¶ –¢–≤–æ–π —Å–∫–ª–∞–¥:\n"
        f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è - {profile_info['energy']} —à—Ç.\n"
        f"üî© –ì–≤–æ–∑–¥–µ–π - {profile_info['nails']['normal']} —à—Ç."
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data='start_generator'))
    bot.send_message(call.message.chat.id, generator_message, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'start_generator')
def start_generator(call):
    user_id = str(call.from_user.id)
    profile_info = user_profiles[user_id]

    if profile_info['water'] > 0:
        generator = GENERATOR_LEVELS[profile_info['generator_type']]
        energy_generated = generator['energy']
        nails_generated = generator['nails']
        experience_gained = random.choice([1, 2, 4, 6, 8, 10])

        profile_info['water'] -= 1
        profile_info['energy'] += energy_generated
        profile_info['nails']['normal'] += nails_generated
        profile_info['generator_experience'] += experience_gained

        check_upgrade(user_id)

        save_profiles()

        bot.send_message(call.message.chat.id, f"{profile_info['first_name']}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞!\n"
                                                f"–ü–æ–ª—É—á–µ–Ω–æ: {energy_generated} ‚ö°Ô∏è —ç–Ω–µ—Ä–≥–∏–∏, üî© {nails_generated} –≥–≤–æ–∑–¥–µ–π, {experience_gained} ‚≠êÔ∏è –æ–ø—ã—Ç–∞\n"
                                                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 1 –≤–æ–¥–∞\n"
                                                f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–¥—ã: {profile_info['water']} üíß")
    else:
        bot.send_message(call.message.chat.id, f"{profile_info['first_name']}, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã üíß!")

def check_upgrade(user_id):
    profile_info = user_profiles[user_id]
    for generator, requirements in GENERATOR_LEVELS.items():
        if generator != profile_info['generator_type'] and profile_info['generator_experience'] >= requirements['experience']:
            profile_info['generator_type'] = generator
            bot.send_message(user_id, f"{profile_info['generator_type'].capitalize()} –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω!")

@bot.callback_query_handler(func=lambda call: call.data == 'generator_info')
def generator_info(call):
    generator_message = f"{call.from_user.first_name}, –≤–æ—Ç –≤–∏–¥—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n"
    for generator, requirements in GENERATOR_LEVELS.items():
        generator_message += f"{requirements['energy']} ‚ö°Ô∏è {generator.capitalize()} - {requirements['experience']} –æ–ø—ã—Ç–∞\n"
    bot.send_message(call.message.chat.id, generator_message)

@bot.callback_query_handler(func=lambda call: call.data == 'explore_zone')
def explore_zone(call):
    user_id = str(call.from_user.id)
    profile_info = user_profiles[user_id]

    if profile_info['energy'] >= 1:
        success = random.choice([True, False])
        if success:
            found_nails = random.randint(5, 20)
            profile_info['nails']['normal'] += found_nails
            profile_info['energy'] -= 1
            profile_info['exploration_success'] = True
            profile_info['exploration_history'].append({
                "nails_found": found_nails,
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
            bot.send_message(call.message.chat.id, f"{profile_info['first_name']}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É!\n"
                                                    f"–í—ã –Ω–∞—à–ª–∏ üî© {found_nails} –≥–≤–æ–∑–¥–µ–π!")
        else:
            profile_info['energy'] -= 1
            profile_info['exploration_success'] = False
            bot.send_message(call.message.chat.id, f"{profile_info['first_name']}, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ —É–≤–µ–Ω—á–∞–ª–æ—Å—å —É—Å–ø–µ—Ö–æ–º.\n"
                                                    f"–≠–Ω–µ—Ä–≥–∏—è –ø–æ—Ç—Ä–∞—á–µ–Ω–∞.")
    else:
        bot.send_message(call.message.chat.id, f"{profile_info['first_name']}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!")

@bot.callback_query_handler(func=lambda call: call.data == 'exploration_history')
def show_exploration_history(call):
    user_id = str(call.from_user.id)
    profile_info = user_profiles[user_id]
    
    if profile_info["exploration_history"]:
        history_message = "–ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:\n"
        for record in profile_info["exploration_history"]:
            history_message += f"- –ù–∞–π–¥–µ–Ω–æ –≥–≤–æ–∑–¥–µ–π: {record['nails_found']} –≤ {record['timestamp']}\n"
        bot.send_message(call.message.chat.id, history_message)
    else:
        bot.send_message(call.message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞.")

@bot.callback_query_handler(func=lambda call: call.data == 'help')
def send_help(call):
    help_text = ("–ö–æ–º–∞–Ω–¥—ã:\n"
                 "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                 "–ë–∞–∑–∞ | –ë - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                 "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—Ç–Ω—É—é –∑–æ–Ω—É - –ù–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
                 "–ú–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞\n"
                 "–ò–Ω—Ñ–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –£–∑–Ω–∞—Ç—å –æ —Ç–∏–ø–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
                 "–ö—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ - –ö—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ\n"
                 "–ö—É–ø–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã - –ö—É–ø–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã\n"
                 "–ò—Å—Ç–æ—Ä–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
                 "–ë–æ–Ω—É—Å - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n"
                 "–ü—Ä–æ–º–æ–∫–æ–¥ - –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
    bot.send_message(call.message.chat.id, help_text)

@bot.callback_query_handler(func=lambda call: call.data == 'inventory')
def send_inventory(call):
    user_id = str(call.from_user.id)
    if user_id in user_profiles:
        nails_info = user_profiles[user_id]["nails"]
        inventory_text = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        for nail_type, amount in nails_info.items():
            inventory_text += f"{nail_type.capitalize()}: {amount}\n"
        bot.send_message(call.message.chat.id, inventory_text)
    else:
        bot.send_message(call.message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'storage')
def send_storage(call):
    user_id = str(call.from_user.id)
    if user_id in user_profiles:
        profile_info = user_profiles[user_id]
        storage_text = (f"–í–∞—à —Å–∫–ª–∞–¥:\n"
                        f"–û—Ä—É–∂–∏–µ: {profile_info['weapons']}\n"
                        f"–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã: {profile_info['medkits']}")
        bot.send_message(call.message.chat.id, storage_text)
    else:
        bot.send_message(call.message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')

@bot.message_handler(func=lambda message: message.from_user.id in user_profiles)
def update_user_name(message):
    user_id = str(message.from_user.id)
    user_profiles[user_id]["first_name"] = message.from_user.first_name
    save_profiles()

@bot.message_handler(func=lambda message: message.text.lower() == "–±–æ–Ω—É—Å")
def claim_bonus(message):
    user_id = str(message.from_user.id)
    if user_id in user_profiles:
        profile_info = user_profiles[user_id]
        last_claim_time = datetime.strptime(profile_info["last_bonus_claim"], "%Y-%m-%dT%H:%M:%S")
        if datetime.now() - last_claim_time >= timedelta(hours=24):
            profile_info["nails"]["normal"] += 1000  # –î–æ–±–∞–≤–ª—è–µ–º 1000 –≥–≤–æ–∑–¥–µ–π
            profile_info["last_bonus_claim"] = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
            save_profiles()
            bot.send_message(message.chat.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: 1000 –≥–≤–æ–∑–¥–µ–π!")
        else:
            time_remaining = timedelta(hours=24) - (datetime.now() - last_claim_time)
            bot.send_message(message.chat.id, f"–ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {time_remaining}.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text.lower().startswith("–∫—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ"))
def buy_weapon(message):
    user_id = str(message.from_user.id)
    profile_info = user_profiles.get(user_id)

    if profile_info is None:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')
        return

    try:
        quantity = int(message.text.split()[2])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_price = 6000 * quantity  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ –æ—Ä—É–∂–∏–µ

        if profile_info['nails']['normal'] >= total_price:
            profile_info['nails']['normal'] -= total_price
            profile_info['weapons'] += quantity  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è
            save_profiles()
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {quantity} –æ—Ä—É–∂–∏—è!")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–≤–æ–∑–¥–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ 1'.")

@bot.message_handler(func=lambda message: message.text.lower().startswith("–∫—É–ø–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã"))
def buy_medkit(message):
    user_id = str(message.from_user.id)
    profile_info = user_profiles.get(user_id)

    if profile_info is None:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—Å–∞–≤ - <code>/start</code>.", parse_mode='HTML')
        return

    try:
        quantity = int(message.text.split()[2])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_price = 9000 * quantity  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É —É–ø–∞–∫–æ–≤–∫—É –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤

        if profile_info['nails']['normal'] >= total_price:
            profile_info['nails']['normal'] -= total_price
            profile_info['medkits'] += quantity  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤
            save_profiles()
            bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {quantity} –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤!")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–≤–æ–∑–¥–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—É–ø–∏—Ç—å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã 1'.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
def restore_water():
    while True:
        time.sleep(600)  # –ñ–¥–∞—Ç—å 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
        for user_id, profile_info in user_profiles.items():
            if profile_info['water'] < 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
                profile_info['water'] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –Ω–∞ 1
                if profile_info['water'] > 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
                    profile_info['water'] = 20
                save_profiles()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                print(f"–í–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –¢–µ–ø–µ—Ä—å –≤–æ–¥—ã: {profile_info['water']}")

def save_profiles():
    with open(PROFILES_FILE, 'w') as file:
        json.dump(user_profiles, file, indent=4)

@bot.callback_query_handler(func=lambda call: call.data == 'raid_instructions')
def raid_instructions(call):
    bot.send_message(call.message.chat.id, "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–π–¥, –Ω–∞–ø–∏—à–∏—Ç–µ '–†–µ–π–¥ <ID>', –≥–¥–µ <ID> - —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–π–¥–∏—Ç—å.")

@bot.message_handler(func=lambda message: message.text.lower().startswith("—Ä–µ–π–¥"))
def raid_user(message):
    user_id = str(message.from_user.id)
    target_id = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–∏

    if target_id not in user_profiles:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    profile_info = user_profiles[user_id]
    target_info = user_profiles[target_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    if profile_info['weapons'] < 5 or profile_info['medkits'] < 7:
        bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Ä–µ–π–¥–∞!\n–í–∞–º –Ω—É–∂–Ω–æ 5 –æ—Ä—É–∂–∏—è –∏ 7 –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤.")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    profile_info['weapons'] -= 5
    profile_info['medkits'] -= 7

    save_profiles()

    bot.send_message(message.chat.id, "–†–µ–π–¥ –∑–∞–ø—É—â–µ–Ω, —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    threading.Timer(30, complete_raid, args=(user_id, target_id)).start()

def complete_raid(user_id, target_id):
    profile_info = user_profiles[user_id]
    target_info = user_profiles[target_id]
    
    success = random.choice([True, False])  # –°–ª—É—á–∞–π–Ω—ã–π —É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞ —Ä–µ–π–¥–∞
    if success:
        earned_rating = random.randint(60, 120)
        target_loss = earned_rating // 2
        profile_info['rating'] += earned_rating  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        target_info['rating'] -= target_loss  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ü–µ–ª–∏

        bot.send_message(user_id, f"{profile_info['first_name']} –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–π–¥–∏–ª–∏ {target_info['first_name']} –Ω–∞ {earned_rating} —Ä–µ–π—Ç–∏–Ω–≥–∞!")
        bot.send_message(target_id, f"{target_info['first_name']} –≤—ã –±—ã–ª–∏ –∑–∞—Ä–µ–π–¥–µ–Ω—ã –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ {target_loss} —Ä–µ–π—Ç–∏–Ω–≥–∞.")
    else:
        penalty = random.choice([30, 120])
        profile_info['rating'] -= penalty  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        bot.send_message(user_id, f"–†–µ–π–¥ –Ω–µ —É–¥–∞–ª—Å—è! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞.")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
    threading.Thread(target=restore_water, daemon=True).start()
    bot.polling(none_stop=True)